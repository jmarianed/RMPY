source "NameConvention.mel";
source "RMRigTools.mel";
source "RMRigShapeControls.mel";
source "RMRiggMath.mel";
source "RMRiggMath.mel";
source "RMRiggControllers.mel";


global proc string StandardReverseFeetJoints(string $AnklePoint){

	string $Ball[]=`listRelatives -c -type "transform" $AnklePoint`;
	string $BorderPoints[]=`listRelatives -c -type "transform" $Ball[0]`;
	$Toe="";
	for ($Node in $BorderPoints)
	{
		if (isValidString($Node,".*toe.*"))
		{
			$Toe = $Node;
		}
	}

	string $AnkleJoint = RMSetFromName($AnklePoint,3,"jnt");
	$AnkleJoint = RMSetFromName($AnkleJoint,4,"rvf");//ReverseFeet

	$AnkleJoint = `joint -n $AnkleJoint`;
	RMAlign $AnklePoint $AnkleJoint  3;
	string $BallJoint = `joint -n (RMSetFromName($AnkleJoint,2,"Ball"))`;

	RMAlign $Ball[0] $BallJoint 3;
	string $ToeJoint = `joint -n (RMSetFromName($AnkleJoint,2,"Toe"))`;

	RMAlign $Toe $ToeJoint 3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $BallJoint;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $ToeJoint;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $AnkleJoint;
	joint -e -oj "xyz" -sao "yup" $AnkleJoint;
    joint -e -oj "xyz" -sao "yup" $BallJoint;
    RMAlign $BallJoint $ToeJoint 2;
    //joint -e -oj "xyz" -zso $ToeJoint ;

    return $AnkleJoint;
}

global proc StandardReverseFeet(string $originPoint){

	string $Childs[]=`listRelatives -c -type "transform"  $originPoint`;
	string $BorderPoints[]=`listRelatives -c -type "transform" $Childs[0]`;

	string $AnkleJnt = StandardReverseFeetJoints($originPoint);
	string $BallJntArray[]=`listRelatives -c -type "joint" $AnkleJnt`;
	string $BallJnt=$BallJntArray[0];
	string $TipJntArray[] =`listRelatives -c -type "joint" $BallJnt`;
	string $TipJnt=$TipJntArray[0];
	
	string $Toe;
	string $FootBK;
	string $FootOut;
	string $FootIn;

	for ($Node in $BorderPoints)
	{
		if (isValidString($Node, ".*toe.*"))
		{
			$Toe = $Node;
		}
		if (isValidString($Node, ".*footLimitBack.*"))
		{
			$FootBK = $Node;
		}
		if (isValidString($Node, ".*footLimitOuter.*"))
		{
			$FootOut = $Node;
		}
		if (isValidString($Node, ".*footLimitInner.*"))
		{
			$FootIn=$Node;
		}
	}

   	float $Length = RMDistancia($Toe,$FootBK);
	float $Width = RMDistancia($FootIn,$FootOut);


	string $side = `RMGetFromName $originPoint 1`;

	//Busca Nombrar los IK que estan dentro del pie el del ball y el de la punta
	string $BallIK=$originPoint;
	$BallIK=`RMSetFromName $BallIK 4 "rvf"`;
	$BallIK=`RMSetFromName $BallIK 3 "IKH"`;

	$BallIK=`RMSetFromName $BallIK 2 "BallIK"`;
	string $TipIK=`RMSetFromName $BallIK 2 "TipIK"`;

	//Crea el nombre para todos los grupos del pie
	string $ToeGrp=`RMSetFromName $BallIK 2 "Toe"`;
	$ToeGrp=`RMSetFromName $ToeGrp 3 "grp"`;
	string $TapGrp=`RMSetFromName $ToeGrp 2 "Tap"`;
   	string $TipGrp=`RMSetFromName $ToeGrp 2 "Tip"`;
	string $AnkleGrp=`RMSetFromName $ToeGrp 2 "Ankle"`;
	string $BallLift=`RMSetFromName $ToeGrp 2 "BallLift"`;
	string $BallGrp=`RMSetFromName $ToeGrp 2 "Ball"`;

   	string $SideInGrp=`RMSetFromName $ToeGrp 2 "SideIn"`;
   	string $SideOutGrp=`RMSetFromName $ToeGrp 2 "SideOut"`;
   	string $FeetOrient=`RMSetFromName $ToeGrp 2 "FeetOrient"`;
   	string $FeetPalmOrient=`RMSetFromName $ToeGrp 2 "FeetPalmOrient"`;
   	string $PoleVector=`RMSetFromName $ToeGrp 2 "FeetPoleVector"`;
   	string $PoleVector=`RMSetFromName $PoleVector 3 "pvc"`;



   	group -em -name $BallGrp;
   	group -em -name $BallLift;
   	group -em -name $TapGrp;
   	group -em -name $TipGrp; 
	group -em -name $SideInGrp;	
	group -em -name $SideOutGrp;
	group -em -name	$FeetOrient;
	group -em -name	$FeetPalmOrient;

   	RMAlign($BallJnt,$BallGrp,3);
   	RMAlign($BallJnt,$BallLift,3);

   	RMAlign($BallJnt,$TipGrp,3);
   	RMAlign($TipJnt,$TipGrp,1);
   	RMAlign($BallJnt,$TapGrp,3);
   	

	RMAlign($FootIn,$SideInGrp,3);
    RMAlign($FootOut,$SideOutGrp,3);
    RMAlign($FootBK,$TapGrp,3);
    RMAlign($BallGrp,$FeetPalmOrient,3);
    RMAlign($AnkleJnt,$FeetOrient,3);

    select -r $FeetOrient;
    move -moveX $Width  -localSpace ;
    select -r $FeetPalmOrient;
    move -moveX $Width  -localSpace;


    ikHandle -solver "ikRPsolver" -sj $AnkleJnt -ee $BallJnt -name $BallIK;
   	ikHandle -solver "ikRPsolver" -sj $BallJnt -ee $TipJnt -name $TipIK;

   	poleVectorConstraint($FeetOrient,$BallIK);
   	poleVectorConstraint($FeetPalmOrient,$TipIK);


   
    //move -ws -r -moveY 0 $FeetSize 0 $TipJnt;
    string $Side = `RMGetFromName $SideInGrp 1`;
    string $CharacterName = `RMGetFromName $SideInGrp 0`;

       
    RMAlign ($CharacterName + "_" + $Side + "_footLimitInner_pnt_rfr") $SideInGrp 1;
    RMAlign ($CharacterName + "_" + $Side + "_footLimitOuter_pnt_rfr") $SideOutGrp 1;
    RMAlign ($CharacterName + "_" + $Side + "_footLimitBack_pnt_rfr") $TapGrp 1;

 	//parent $IKname $Ball;Esta instrucion debe de emparentar en algun
   	// otro lado el Ik de la pierna al Ball del pie
   	parent $BallIK $BallLift;
   	parent $TipIK $BallLift;
   	parent $BallLift $SideInGrp;   
   	parent $BallGrp $SideInGrp;      
   	parent $SideInGrp $SideOutGrp;   
   	parent $SideOutGrp $TapGrp;
   	parent $TapGrp $TipGrp;
   	parent $FeetOrient $BallGrp;
   	parent $FeetPalmOrient $BallLift;

   	string $TipData=`RMCreateGrouponObj $TipGrp 1`;
   	string $MainData=`RMCreateGrouponObj $TipData 1`;
   	string $Name=`RMSetFromName $TipData 2 "MainFeet"`;

   	$MainFeet=`rename $MainData $Name`;

	string $FeetControl = `RMSetFromName $SideInGrp 2 "FeetControl"`;

	$FeetControl = `RMSetFromName $FeetControl 3 "ctrl"`;

	$FeetControl =create_cube_line($Length,$Width,($Width/2),$FeetControl);
	
	
	RMAlign  $originPoint $FeetControl 3;

	parentConstraint  -mo $FeetControl $TipData;

   	RMaddFeetControls $FeetControl;
	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $BallGrp;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $BallLift;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $TapGrp;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $TipGrp;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $SideInGrp;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $SideOutGrp;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $FeetOrient;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $FeetPalmOrient;
	
	parent $AnkleJnt $BallGrp;

   	RMConnectWithLimits ($FeetControl+".ToePivot") ($TipGrp+".rotateZ") (-10) 10 (-70)(70)(0);
   	RMConnectWithLimits ($FeetControl+".ToePivotSide") ($TipGrp+".rotateY") (-10) 10 (-70)(70)(0);
   	RMConnectWithLimits ($FeetControl+".ToeLift") ($BallLift+".rotateZ") (-10) 10 (-70)(70)(0);
   	RMConnectWithLimits ($FeetControl+".BallPivot") ($BallGrp+".rotateZ") (-10) 10 (70)(-70)(0);
   	RMConnectWithLimits ($FeetControl+".HeelPivot") ($TapGrp+".rotateZ") (-10) 10 (-70)(70)(0);

   	if (self.NameConv.RMGetFromName($SideInGrp, "Side" )== "LF")
    {
    ConnectWithLimits ($FeetControl+".Tilt") ($SideInGrp+".rotateX") (-10) 10 (70)(0)(0);
    ConnectWithLimits ($FeetControl+".Tilt") ($SideOutGrp+".rotateX") (-10) 10 (0)(-70)(0);
	}
	else
	{
	ConnectWithLimits ($FeetControl+".Tilt") ($SideInGrp+".rotateX") (-10) 10 (0)(-70)(0);
    ConnectWithLimits ($FeetControl+".Tilt") ($SideOutGrp+".rotateX") (-10) 10 (70)(0)(0);
	}
	string $GrupoCntrl1 = `RMCreateGrouponObj $FeetControl 1`;
  	scaleConstraint $FeetControl $MainFeet;
    //RMLockAndHideAttributes ({$FeetControl}) "1111110001";

}

//StandardReverseFeet ("Character01_LF_ankleFeet_pnt_rfr");