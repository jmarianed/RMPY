global proc RMObjLookXAtPoint (string $Obj01, vector $DirVect){

    float $longitud = (`mag (<<$DirVect.x,0,$DirVect.z>>)`);

    if ($longitud == 0)
    {
        if ($DirVect.y > 0)
            {
                xform -ws -rotation 0 0 90 $Obj01;
            }
        else 
            {
                xform -ws -rotation 0 0 -90 $Obj01;
            }
    }
    else{
        float $Ry = 0;

        if ($DirVect.x > 0)
        {
            //print ($DirVect.z/$longitud);

        	$Ry = asind (float ($DirVect.z)/$longitud);
            
        }
        else
        {
        	$Ry = 180.0 - asind (float ($DirVect.z)/$longitud);
        }
        
        $longitud= `mag ($DirVect)`;
        print $longitud;
        float $Rz = asind(float($DirVect.y)/$longitud);
        print "\n";
        print $Rz;
        xform -ws -rotation 0 (-$Ry) 0 $Obj01;
        xform -r -os -rotation 0  0 ($Rz) $Obj01;
    }
}

//$value = `getAttr "locator2.translate"`;
//RMObjLookXAtPoint("locator1",<<$value[0],$value[1],$value[2]>>);
//RMObjLookXAtPoint("locator1",<<0,1,0>>);
global proc vector ReturnParentPos (string $Obj[]){
    select -r $Obj;
    string $temp[] = `listRelatives -p`;
    select -r $temp;
    vector $ParentPosition=`xform -q -ws -rp`;
    return ($ParentPosition);
}

global proc vector ReturnParentRotation (string $Obj[]){
    select -r $Obj;
    string $temp[] = `listRelatives -p`;
    select -r $temp;
    vector $ParentRotation=`xform -q  -rotation`;
    return ($ParentRotation);
}

global proc ScalePoints( string $Transformar, float $ref){
    scale -xyz ($ref) ($ref) ($ref) $Transformar;
    // Statements;
} 
/*Funcion que regresa la Distancia entre dos objetos*/
global proc float RMDistancia (string $Obj1,string $Obj2){
    vector $p1= `xform -a -ws -q -rp $Obj1`;
    vector $p2= `xform -a -ws -q -rp $Obj2`;
    return ($p1 - $p2);
}