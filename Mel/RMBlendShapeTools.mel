source "RMDeformers.mel";
source "RMcomponents.mel";
global proc RMblendShapeRebuilder(string $BSNode)
{
	string $BSWeight[]= (`listAttr ($BSNode +".weight")`);

	string $BSWeightAlias[]=`listAttr -m ($BSNode +".weight")`;
	int $TargetIdx[]=`getAttr -mi ($BSNode+".inputTarget")`;
	
	print "Input Target Index\n";
	print $TargetIdx;
	int $InputTargetGroup[]= `getAttr -mi ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup")`;

	for ($EachBS in $BSWeightAlias){
		print $EachBS;	
		print (`getAttr ($BSNode+"."+$EachBS)`);
		print "\n";
	}
	int $AliasIndex=0;
	for ($EachTargetGroup in $InputTargetGroup)
	{
		print "\n\tInput Target Group\n\t";
		print $EachTargetGroup;
		int $TargetItems[]= `getAttr -mi ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem")`;
		int $Intermediate=0;
		for ($EachTarget in $TargetItems)
		{
			print "\n\t\tTargetsItems\n\t\t";
			print $EachTarget;
			string $Connections[]=(`listConnections ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputGeomTarget")`);
			if (`size($Connections)`==0)
			{
				setAttr ($BSNode+".envelope") 0;
				while (`objExists ($BSWeightAlias[$AliasIndex] + "BS"+ $Intermediate)`) 
					{
						$Intermediate+=1;
					}
				$RebuildBlendShape = RMduplicateOutputMesh($BSNode,($BSWeightAlias[$AliasIndex] + "BS"+ $Intermediate));
				setAttr ($BSNode+".envelope") 1;
				print("\nNo connection Found on: "+ $BSWeightAlias[$AliasIndex]);
				float $VtxValues[]= `getAttr ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputPointsTarget")`;
				string $VtxComp[] = (`getAttr ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputComponentsTarget")`);
				$VtxList = RMcomponentArray($VtxComp);
				int $VtxIndex=0;
				for ($Vtx in $VtxList)
				{
					xform -translation ($VtxValues[$VtxIndex*4]) ($VtxValues[$VtxIndex*4 + 1]) ($VtxValues[$VtxIndex*4+2]) -relative ($RebuildBlendShape+".vtx["+$Vtx+"]");
				}
				connectAttr -f ($RebuildBlendShape+".outMesh") ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputGeomTarget");
			}
		}
	$AliasIndex+=1;
	}
}


global proc RMblendShapeRebuilderFromBS(string $BSNode)
{
	string $BSWeight[]= (`listAttr ($BSNode +".weight")`);

	string $BSWeightAlias[]=`listAttr -m ($BSNode +".weight")`;
	int $TargetIdx[]=`getAttr -mi ($BSNode+".inputTarget")`;
	
	print "Input Target Index\n";
	print $TargetIdx;
	int $InputTargetGroup[]= `getAttr -mi ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup")`;

	for ($EachBS in $BSWeightAlias){
		print $EachBS;	
		print (`getAttr ($BSNode+"."+$EachBS)`);
		print "\n";
	}
	int $AliasIndex=0;
	for ($EachTargetGroup in $InputTargetGroup)
	{
		print "\n\tInput Target Group\n\t";
		print $EachTargetGroup;
		int $TargetItems[]= `getAttr -mi ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem")`;
		int $Intermediate = 0;

		string $TargetGroupAlias = `listAttr -m ($BSNode+".weight["+$EachTargetGroup+"]")`;
		print "\n\t Target Group Alias ";
		//print $TargetGroupAlias;
		
		for ($EachTarget in $TargetItems)
		{
			print "\n\t\tTargetsItems\n\t\t";
			print $EachTarget;
			string $Connections[]=(`listConnections ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputGeomTarget")`);
			if (`size($Connections)`==0)
			{
				while (`objExists ($BSWeightAlias[$AliasIndex] + "BS"+ $Intermediate)`) 
					{
						$Intermediate+=1;
					}
				if ($BSWeightAlias[$AliasIndex]!="weight[36]")
				{
					setAttr ($BSNode+"."+$BSWeightAlias[$AliasIndex]) (($EachTarget-5000)/1000);
					//$RebuildBlendShape = RMduplicateOutputMesh($BSNode,($BSWeightAlias[$AliasIndex] + "BS"+ $Intermediate));
					setAttr ($BSNode+"."+$BSWeightAlias[$AliasIndex]) 0;
					print("\nNo connection Found on: "+ $BSWeightAlias[$AliasIndex] +" with index  Number"+$AliasIndex);
					//connectAttr -f ($RebuildBlendShape+".outMesh") ($BSNode+".inputTarget["+$TargetIdx[0]+"].inputTargetGroup["+$EachTargetGroup+"].inputTargetItem["+$EachTarget+"].inputGeomTarget");
				}
			}
		}
	$AliasIndex+=1;
	}
}

/*This procedure creates an sphere and reconnects the input geometry from another object*/
global proc string  RMduplicateOutputMesh (string $Node,string $ObjName)
{
	polySphere -ch 0 -name $ObjName;
	string $ShapeArray[]=`listRelatives -s $ObjName`;
	string $Shape=$ShapeArray[0];
	print $Shape;
	print $Node;
	connectAttr -f ($Node+".outputGeometry[0]")  ($Shape+".inMesh");
	int $Time = `currentTime -query`;
	currentTime -edit ($Time+1);
	currentTime -edit $Time;
	disconnectAttr ($Node+".outputGeometry[0]") ($Shape+".inMesh");
	return $Shape;
}

global proc string RMGetGPInputShape(string $Node){

	if (`objectType($Node)`=="groupParts")
	{
		string $Input[] = `listConnections -sh true ($Node + ".inputGeometry")`;

		if (`objectType ($Input[0])`=="mesh")

			return $Node;
		else
			return RMGetGPInputShape($Input[0]);
	}
	else 
	{
		string $GroupParts[] = `listConnections -type "groupParts" $Node`;

		if (`size($GroupParts)` > 0)
		{
			return RMGetGPInputShape($GroupParts[0]);
		}
		else
			print "No GroupParts Node Found";
			return "";
	}
}

RMblendShapeRebuilderFromBS("asFaceBS");


