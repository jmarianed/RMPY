source "RMRiggMath.mel";
source "RMRigTools.mel";
source "RMNameConvention.mel";

global proc string[] RMCreateSpinePoints (vector $Origin ,vector $DirectionVector ,float $SpineLength){
    $DirectionVector = unit ($DirectionVector);
    int $numberOfSpineBones = 5;
    string $spinePointArray[] = {};
    float $JointIncrement = ($SpineLength/$numberOfSpineBones-1);

    for ( $spinePointCount = 0; $spinePointCount<$numberOfSpineBones; ++$spinePointCount )
    {
        string $temp[] = `spaceLocator -n (RMUniqueName("Character01_MD_Spine_pnt_rfr"))`;
        $spinePointArray[$spinePointCount] = $temp[0];
        RMObjLookXAtPoint (($temp[0]),$DirectionVector);

        if ($spinePointCount > 0)
        {
            RMAlign $spinePointArray[$spinePointCount-1] $spinePointArray[$spinePointCount] 3;
            parent ($spinePointArray[$spinePointCount]) ($spinePointArray[$spinePointCount-1]);
            setAttr ($spinePointArray[$spinePointCount] + ".translateX") $JointIncrement;
        }   
        else
        {
            RMObjLookXAtPoint  $spinePointArray[0] $DirectionVector;
            xform -ws -translation ($Origin.x) ($Origin.y) ($Origin.z) $spinePointArray[0];
        }
    }
    
    string $temp[]= `spaceLocator -n (RMUniqueName("Character01_MD_Hip_pnt_rfr"))`;
    $spinePointArray[size ($spinePointArray)] = $temp[0];
    xform -ws -translation ($Origin.x) ($Origin.y) ($Origin.z) $spinePointArray[`size ($spinePointArray)`-1];
    RMObjLookXAtPoint (($spinePointArray[size($spinePointArray) - 1]),($DirectionVector * -1));
    parent(($spinePointArray [`size($spinePointArray)` - 1 ]),($spinePointArray[0]));
    xform -os -relative -rotation 90 0 0 $spinePointArray[0];
    setAttr ($spinePointArray[`size ($spinePointArray)`]+".translateX") (-$JointIncrement);

    return ($spinePointArray);
}