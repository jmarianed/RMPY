global proc string create_cube_line(float $height,float $lenght,float $width,string $name)
{
    string $shapes[];
    $shapes[0]=`curve -d 1 -p 0         (-$lenght/2) ($width/2) -p 0         (-$lenght/2) (-$width/2) -n $name`;
    $shapes[1]=`curve -d 1 -p ($height) (-$lenght/2) ($width/2) -p ($height) (-$lenght/2) (-$width/2) -n ($name+"_1")`;
    $shapes[2]=`curve -d 1 -p 0          ($lenght/2) ($width/2) -p 0         ($lenght/2) (-$width/2) -n ($name+"_2") `;
    $shapes[3]=`curve -d 1 -p ($height) ($lenght/2)  ($width/2) -p ($height)  ($lenght/2) (-$width/2) -n ($name+"_3")`;

    $shapes[4]=`curve -d 1 -p 0 (-$lenght/2) ($width/2) -p  $height (-$lenght/2) ($width/2) -n ($name+"_4")`;
    $shapes[5]=`curve -d 1 -p 0 ($lenght/2)  (-$width/2) -p $height ($lenght/2)  (-$width/2) -n ($name+"_5")`;
    $shapes[6]=`curve -d 1 -p 0 (-$lenght/2) (-$width/2) -p $height (-$lenght/2) (-$width/2) -n ($name+"_6")`;
    $shapes[7]=`curve -d 1 -p 0 ($lenght/2)  ($width/2) -p  $height ($lenght/2)  ($width/2) -n ($name+"_7")`;

    $shapes[8]=`curve -d 1 -p 0          (-$lenght/2) (-$width/2) -p 0         ($lenght/2) (-$width/2) -n ($name+"_8")`;
    $shapes[9]=`curve -d 1 -p 0          (-$lenght/2) ($width/2)  -p 0         ($lenght/2) ($width/2) -n ($name+"_9")`;
    $shapes[10]=`curve -d 1 -p ($height) (-$lenght/2) (-$width/2) -p ($height) ($lenght/2) (-$width/2) -n ($name+"_10")`;
    $shapes[11]=`curve -d 1 -p ($height) (-$lenght/2) ($width/2)  -p ($height) ($lenght/2) ($width/2) -n ($name+"_11")`;
    turn_to_one $shapes;
    return $shapes[0];
}

global proc string RMCreateCubeControl (float $Sizev,string $name)
{
    string $shapes[];
    float $lenght=$Sizev;
    float $width=$Sizev;
    float $height=$Sizev;
    $shapes[0]=`curve -d 1 -p 0 (-$lenght/2) ($width/2) -p 0 (-$lenght/2) (-$width/2) -n $name`;
    $shapes[1]=`curve -d 1 -p ($height) (-$lenght/2) ($width/2) -p ($height) (-$lenght/2) (-$width/2) -n ($name+"_1")`;
    $shapes[2]=`curve -d 1 -p 0 ($lenght/2) ($width/2) -p 0 ($lenght/2) (-$width/2) -n ($name+"_2") `;
    $shapes[3]=`curve -d 1 -p ($height) ($lenght/2) ($width/2) -p ($height) ($lenght/2) (-$width/2) -n ($name+"_3")`;
    $shapes[4]=`curve -d 1 -p 0 (-$lenght/2) ($width/2) -p $height (-$lenght/2) ($width/2) -n ($name+"_4")`;
    $shapes[5]=`curve -d 1 -p 0 ($lenght/2) (-$width/2) -p $height ($lenght/2) (-$width/2) -n ($name+"_5")`;
    $shapes[6]=`curve -d 1 -p 0 (-$lenght/2) (-$width/2) -p $height (-$lenght/2) (-$width/2) -n ($name+"_6")`;
    $shapes[7]=`curve -d 1 -p 0 ($lenght/2) ($width/2) -p $height ($lenght/2) ($width/2) -n ($name+"_7")`;
    $shapes[8]=`curve -d 1 -p 0 (-$lenght/2) (-$width/2) -p 0 ($lenght/2) (-$width/2) -n ($name+"_8")`;
    $shapes[9]=`curve -d 1 -p 0 (-$lenght/2) ($width/2) -p 0 ($lenght/2) ($width/2) -n ($name+"_9")`;
    $shapes[10]=`curve -d 1 -p ($height) (-$lenght/2) (-$width/2) -p ($height) ($lenght/2) (-$width/2) -n ($name+"_10")`;
    $shapes[11]=`curve -d 1 -p ($height) (-$lenght/2) ($width/2) -p ($height) ($lenght/2) ($width/2) -n ($name+"_11")`;
    turn_to_one $shapes;
    return $shapes[0];
}

global proc string create_box_ctrl(string $bone){
    string $temp=`RMObjNameToVar $bone`;
    string $CntlName=`RMSetFromName $temp 3 "ctr"`;
    string $tempArray[]=`listRelatives -c $bone`;
  
    if (`size $tempArray`!=0){
        float $Lenghtbone = `lenght_of_bone $temp`;
        $CntlName=`create_cube_line $Lenghtbone ($Lenghtbone/4) ($Lenghtbone/4) $CntlName`;
    }
    else {
        string $tempArray[]=`listRelatives -p $bone`;
        float $Lenghtbone = `lenght_of_bone $tempArray[0]`;
        $CntlName=`create_cube_line ($Lenghtbone/4) ($Lenghtbone/4) ($Lenghtbone/4) $CntlName`;
    }
    RMAlign $temp $CntlName 3;
    return $CntlName;
}

/*Funcion que convierte un conjunto de lineas dadas en el arreglo $shapes en una sola que es $shapes[0]*/
global proc turn_to_one(string $shapes[])
{
    int $sizeArray=`size $shapes`;
    int $i;
    for ( $i=1;$i<$sizeArray;$i++)
    {
        string $temp[]=`listRelatives -s -c $shapes[$i]`;
        parent -add -shape $temp[0] $shapes[0];
        delete $shapes[$i];
    }
}

global proc string RMCreaControl(string $obj, float $r){
    $newName=$obj;
    $newName=`RMSetFromName $newName 3 "ctr"`;
    string $temp[]=`circle -normal 1 0 0 -r $r -name $newName`;
    RMAlign $obj $temp[0] 3;
    return $temp[0];
}

global proc string[] RMRemoveChildren(string $obj1){
    string $children[]=`listRelatives -type "transform" -children $obj1`;
    
    for ($i in $children)
        {
        parent -w $i;
        }
    return $children;
}
global proc RMParentArray(string $parent, string $Array[]){
    for ($i in $Array)
        {parent $i $parent;}
}

global proc RMConnectScale(string $controler,string $joint){
    string $MultName = $joint;
    string $name =`RMGetFromName $MultName 2`;
    string $MultName=`RMSetFromName $MultName 2 ($name+"MultDivide")`;
    string $MultName=`RMSetFromName $MultName 4 "utl"`;
    $MultName=`shadingNode -asUtility -name $MultName multiplyDivide`;
    float $origVal=`getAttr ($joint + ".translateX")`;
    setAttr ($MultName+".input2X") $origVal;
    connectAttr -f ($controler+".scaleX") ($MultName + ".input1X");
    connectAttr -f ($MultName + ".outputX") ($joint + ".translateX");
}

global proc RMIKFKvisibilityLink (string $Obj[],string $systemIKFK,string $Control)
{
    string $newName=$Control;
    string $Name=`RMGetFromName $Control 2`;
    $newName=`RMSetFromName $newName 2 ($Name+"Reverse")`;
    $newName=`RMSetFromName $newName 4 "utl"`;
    string $i;
    if ($systemIKFK=="FK")
    {
        if (`objExists $newName`==false)
        {
        shadingNode -name $newName -asUtility reverse;
        connectAttr -f ($Control+".IKFKSwitch") ($newName+".inputX");
        }
        print $Obj;
        for ($i in $Obj)
        {
         connectAttr -f ($newName+".outputX") ($i+".visibility");
         RMLockAndHideAttributes ({$i}) "3333333330";
        }
    }
    else
    {
        for ($i in $Obj)
        {
            connectAttr -f ($Control+".IKFKSwitch") ($i+".visibility");
            RMLockAndHideAttributes ({$i}) "3333333330";
        }        
    }    
}

global proc RMParentLink( string $ObjIK , string $ObjFK , string $ObjJTX, string $Cntrl)
{
    $ObjName =`RMGetFromName $ObjJTX 2`;
    string $Constraint = $ObjJTX;
    $Constraint=`RMSetFromName $Constraint 2 ($ObjName+"IKSwitchConstraint")`;
    $Constraint=`RMSetFromName $Constraint 3 "pcn"`;
    $Constraint=`RMSetFromName $Constraint 4 "IKS"`;
    $Constraint=`RMUniqueName $Constraint`;
    $cntrlName =`RMGetFromName $Cntrl 2`;
    string $ExpressionName = $Cntrl;
    $ExpressionName=`RMSetFromName $ExpressionName 2 ($cntrlName+"Expression")`;
    $ExpressionName=`RMSetFromName $ExpressionName 3 "exp"`;
    $ExpressionName=`RMSetFromName $ExpressionName 4 "IKS"`;
    $ExpressionName=`RMUniqueName $ExpressionName`;
    
    string $PC[]=`parentConstraint -name $Constraint $ObjIK $ObjJTX `;
    parentConstraint $ObjFK $ObjJTX;
    string $TargetList[]=`parentConstraint -q -weightAliasList $PC[0]`;
    if (!`attributeQuery -node $Cntrl -ex "IKFKSwitch"`)
    {
        addAttr -at "float" -ln IKFKSwitch -sn IFS -hnv 1 -hxv 1 -h 0 -k 1 -smn 0 -smx 1 $Cntrl;
    }
    if (!`objExists $ExpressionName`)
    {
        string $nodeName = `expression -s ($PC[0] + "." + $TargetList[0]+"="+$Cntrl+".IKFKSwitch;\n"+
        $PC[0] + "." + $TargetList[1]+"=1-"+$Cntrl+".IKFKSwitch;\n") -name $ExpressionName`;
    }
    else 
    {
        string $script=`expression -q -s $ExpressionName`;
        expression -e -s ($script + "\n" + $PC[0]+"."+$TargetList[0]+ "=" + $Cntrl + ".IKFKSwitch;\n"+
        $PC[0]+"."+$TargetList[1]+"=1-"+$Cntrl+".IKFKSwitch;\n") $ExpressionName;
    }
}
global proc RMConnectWithLimits (string $AttrDriver, string $AttrDriven, float $minDriver,float $maxDriver,float $minDriven,float $maxDriven,float $ZeroValue)
{
    setDrivenKeyframe -cd $AttrDriver -driverValue $maxDriver -value $maxDriven $AttrDriven;
    setDrivenKeyframe -cd $AttrDriver -driverValue 0 -value $ZeroValue $AttrDriven;
    setDrivenKeyframe -cd $AttrDriver -driverValue $minDriver -value $minDriven $AttrDriven;
}

global proc string RMCustomPickWalk (string $Elem,string $Class,int $depth){
    string $childs[]=`listRelatives -c $Elem`;
    string $i;
    string $Class;
    string $returnValue=$Elem;
    if (($depth == 0) || (`size $childs` == 0))
    {
        $returValue = $Elem;
    }
    else
    {
        for ($i in $childs)
        {
            if (`nodeType $i` == $Class)
                {
                print ("node:" + $i + "\n");
                $returnValue = `RMCustomPickWalk $i $Class ($depth-1)`;
                }
        }
        if ($returnValue=="")
        {
            print ("valor cero:" + $returnValue + $Elem);
            $returnValue=$Elem;
        }
    }
    return $returnValue;
}
global proc RMScaleShapeControls(float $Cx,float $Cy,float $Cz)
{
    string $daObj[] = `ls -sl`;
    string $Shapes[] = `listRelatives -s $daObj[0]`;
    select ($daObj[0]+".cv[*]");

    print $Shapes;

    for ( $Shape in $Shapes)
    {
        scale -r $Cx $Cy $Cz ($Shape+".cv[*]");
    }

    select -r $daObj[0] ;
}
global proc RMLinkHands(){
    string $ManoIzquierda = `RMObjNameToVar "*LF_wrist_jnt_JXT"`;
    RMHandControls($ManoIzquierda);
    string $ManoDerecha = `RMObjNameToVar "*RH_wrist_jnt_JXT"`;
    RMHandControls($ManoDerecha);
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/******************************* OJOS *********************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
global proc RMLinkEyes(string $side){
    
    string $Eye=`RMObjNameToVar ("*_"+$side+"_Eye_msh_ful")`;
    string $CharName=`RMGetFromName $Eye 2`;
    float $eyeScale[]=`getAttr ($Eye+".scale")`;
    setAttr ($Eye+".scale") 1.0 1.0 1.0;
    select -cl;
    float $SphRad=`sphere -q -r $Eye`;
    string $newName=$CharName+"_"+$side+"_MainEyeUpperLid_jnt_ful";
    string $MainEyeUpperLid=`joint -n $newName -rad ($SphRad/5)`;

    RMAlign $Eye $MainEyeUpperLid 3 ;

    string $newName=($CharName+"_"+$side+"_UpperLid_jnt_ful");
    joint -n $newName -r -p $SphRad 0 0 -rad ($SphRad/5);
    string $EyeParent=`RMCreateGrouponObj $MainEyeUpperLid 1`;
    string $newName=$CharName+"_"+$side+"_MainEyeLowerLid_jnt_ful";
    string $MainEyeLowerLid=`joint -n $newName -rad ($SphRad/5)`;
    RMAlign $Eye $MainEyeLowerLid 3 ;
    string $newName=$CharName+"_"+$side+"_LowerLid_jnt_ful";
    joint -n $newName -r -p $SphRad 0 0 -rad ($SphRad/5);
    parent $MainEyeLowerLid $EyeParent;
    setAttr ($EyeParent+".scale") ($eyeScale[0]) ($eyeScale[1]) ($eyeScale[2]);
    select -r $Eye;
    string $eyeLattice[]= `lattice -n ($CharName+"_"+$side+"_EyeLattice_def_ful") -oc true -dv 2 2 2 -ol 2 -ofd ($SphRad/3)`;
    float $LatticeScale[]=`getAttr ($eyeLattice[1]+".scale")`;
    setAttr ($eyeLattice[1]+".scale") ($eyeScale[0]*$LatticeScale[0]) ($eyeScale[1]*$LatticeScale[1]) ($eyeScale[2]*$LatticeScale[2]);
}
