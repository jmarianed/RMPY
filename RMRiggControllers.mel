
/*Crea la herarquia de los controles IK Para La Pierna*/
proc string[] CreateFKControlsLeg (string $FKroot,string $Systemparent)
	{    
	float $Tam=`LenghtOfBone $FKroot`;
	string $Ex1 = $FKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
    string $temp3[]=`listRelatives -c $temp2[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
    string $Ex5=$temp3[0];
/*	string $CntrlExt1 = `CreateBoxCtrl $Ex1`;
	string $CntrlExt2 = `CreateBoxCtrl $Ex3`;
	string $CntrlExt3 = `CreateBoxCtrl $Ex4`;*/
	string $CntrlExt1 = `creacontrol $Ex1 ($Tam*1/2)`;
	string $CntrlExt2 = `creacontrol $Ex3 ($Tam*1/2)`;
	string $CntrlExt3 = `creacontrol $Ex4 ($Tam*1/4)`;
	string $CntrlExt4 = `creacontrol $Ex5 ($Tam*1/4)`;
	
	string $GrupoCntrl1 = `RMCreateGrouponObj $CntrlExt1 1`;
	string $GrupoCntrl2 = `RMCreateGrouponObj $CntrlExt2 1`;
	string $GrupoCntrl3 = `RMCreateGrouponObj $CntrlExt3 1`;
	string $GrupoCntrl4 = `RMCreateGrouponObj $CntrlExt4 1`;
    setAttr ($GrupoCntrl3+".rotateY") 0;
    	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex4;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt4;
	
	pointConstraint $Ex1 $GrupoCntrl1;
	parentConstraint -mo $Systemparent $GrupoCntrl1;
	pointConstraint $Ex3 $CntrlExt2;
	parentConstraint -maintainOffset -st "none" $Ex2 $GrupoCntrl2;
	parent $GrupoCntrl2 $GrupoCntrl1;
	parent $GrupoCntrl4 $GrupoCntrl3;

	parent $GrupoCntrl3 $GrupoCntrl2;
	parentConstraint -mo $CntrlExt2 $GrupoCntrl3;
	//pointConstraint $Ex4 $GrupoCntrl3;
	//OrientConstraint $GrupoCntrl2 $GrupoCntrl3;
	//parentConstraint -mo $CntrlExt2 $GrupoCntrl3;
	//parentConstraint $CntrlExt3 $Ex4;
	connectAttr ($CntrlExt1 +".rotate") ($Ex1+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex2+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex3+".rotate");
	connectAttr ($CntrlExt3 +".rotate") ($Ex4+".rotate");
	//connectAttr ($CntrlExt4 +".rotate") ($Ex5+".rotate");
    
	orientConstraint -mo $CntrlExt3 $Ex4;
	orientConstraint $CntrlExt4 $Ex5;
	parentConstraint -mo $Ex4 $GrupoCntrl4;
	/*funciones para el stretchyIK */

	RMConnectScale $CntrlExt1 $Ex2;
	RMConnectScale $CntrlExt2 $Ex3;
	RMConnectScale $CntrlExt2 $Ex4;

	RMLockAndHideAttributes ({$CntrlExt1}) "0001111003";
	RMLockAndHideAttributes ({$CntrlExt2}) "0000101003";
    RMLockAndHideAttributes ({$CntrlExt3}) "0001110003";
   
    string $Mover2=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
    string $FKGroup=`RMObjNameToVar "*FKGroup*"`;
	parent $GrupoCntrl1 $FKGroup;
   	//parent $GrupoCntrl1 $Mover2;
   
   return {$CntrlExt1, $CntrlExt2, $CntrlExt3,$CntrlExt4};
}

global proc string[] RMCreateIKControlsLeg (string $IKroot , string $Systemparent)
{
	//Obtiene los nombres de los 4 joints del sistema y los reasigna a Ex1 2 3 4
	string $Ex1 = $IKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
	string $temp3[]=`listRelatives -c $temp2[0]`;
	string $temp4[]=`listRelatives -c $temp3[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
	string $Ex5=$temp3[0];
	string $Ex6=$temp4[0];
	RMAlign $Ex5 $Ex6 2; 
	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex4;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex5;
	//Crea un control posicionado y RMAligndo a la extremidad 4
	float $FeetSize=`distancia $Ex4 $Ex5`;
   //string $IKcontrol = ` CreateBoxCtrl $Ex4`;
    string $IKcontrol=$Ex4;
	$IKcontrol=`RMSetFromName $IKcontrol 3 "ctr"`;
	$IKcontrol=`RMSetFromName $IKcontrol 4 "IK"`;
	$IKcontrol=`RMUniqueName $IKcontrol`;

    RMCreateCubeLine $FeetSize $FeetSize $FeetSize $IKcontrol;
    move -r ($FeetSize/2) 0 0 ($IKcontrol+".scalePivot") ($IKcontrol+".rotatePivot");
	move -rpr -a 0 0 0 $IKcontrol;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $IKcontrol;
   
   
    // RMAlign  $Ex5 $IKcontrol 2;
    RMAlign  $Ex4 $IKcontrol 1;
	
 	//	string $IKcontrol = `creacontrol $Ex4 4`;
	//Crea un Nombre para el IK que tenga en el sistema al que pertenece IKH
	string $IKname=$Ex4;
	$IKname=`RMSetFromName $IKname 3 "IKH"`;
	$IKname=`RMSetFromName $IKname 4 "IK"`;
	string $BallIK=`RMSetFromName $IKname 2 "BallIK"`;
    string $TipIK=`RMSetFromName $IKname 2 "TipIK"`;
	
	ikHandle -sj $Ex1 -ee $Ex4 -name $IKname;

    ikHandle -sj $Ex4 -ee $Ex5 -name $BallIK;
    ikHandle -sj $Ex5 -ee $Ex6 -name $TipIK;
   
	string $PoleVector[]=`CreatePoleVector $IKname`;
	RMMakeIkStretchy $IKname;
	
	
	string $Ankle=$Ex4;
	$Ankle=`RMSetFromName $Ankle 2 "Ankle"`;
	$Ankle=`RMSetFromName $Ankle 3 "grp"`;
	$Ankle=`RMSetFromName $Ankle 4 "IK"`;
	string $Ball=`RMSetFromName $Ankle 2 "Ball"`;
   string $BallLift=`RMSetFromName $Ankle 2 "BallLift"`;
   string $Toe=`RMSetFromName $Ankle 2 "Toe"`;
   string $Tap=`RMSetFromName $Ankle 2 "Tap"`;
   string $Tip=`RMSetFromName $Ankle 2 "Tip"`;
   
   string $SideIn=`RMSetFromName $Ankle 2 "SideIn"`;
   string $SideOut=`RMSetFromName $Ankle 2 "SideOut"`;
   string $FeetOrient=`RMSetFromName $Ankle 2 "FeetOrient"`;

         
   group -em -name $Ball;
   group -em -name $BallLift;
//   group -em $Toe;   
   group -em -name $Tap;   
   group -em -name $Tip; 
   group -em -name $SideIn;	
   group -em -name $SideOut;


   RMAlign $Ex5 $Ball 3;
   RMAlign $Ex5 $BallLift 3;
//   RMAlign $Ex5 $Toe 3;
   RMAlign $Ex5 $Tip 3;
   RMAlign $Ex6 $Tip 1;
   RMAlign $Ex5 $Tap 3;
   RMAlign $Ex5 $SideIn 3;
   RMAlign $Ex5 $SideOut 3;
   
   //move -ws -r -moveY 0 $FeetSize 0 $Ex6;

   if (`RMGetFromName $SideIn 1`=="LF")
       {
        move -ws -r -moveX ($FeetSize*.3) 0  0 $SideIn;
        move -ws -r -moveX (-$FeetSize*.3) 0 0 $SideOut;
       }
   else {
        move -ws -r -moveX (-$FeetSize*.3) 0 0 $SideIn;
        move -ws -r -moveX ($FeetSize*.3) 0 0 $SideOut;
       }
  
   move -ws -r -moveZ 0 0 (-$FeetSize*0.5) $Tap;
   
   
   
   parent $IKname $Ball;
   parent $BallIK $BallLift;
   parent $TipIK $BallLift;
   parent $BallLift $SideIn;   
   parent $Ball $SideIn;      
   parent $SideIn $SideOut;   
   parent $SideOut $Tap;
   parent $Tap $Tip;
   string $TipData=`RMCreateGrouponObj $Tip 1`;
   string $MainData=`RMCreateGrouponObj $TipData 1`;
   string $Name=`RMSetFromName $TipData 2 "MainFeetData"`;
   $MainData=`rename $MainData $Name`;
   
   parentConstraint  -mo $IKcontrol $TipData;
    
   addFeetControls $IKcontrol;

   ConnectWithLimits ($IKcontrol+".ToePivot") ($Tip+".rotateZ") (-10) 10 (-70)(70)(0);
   ConnectWithLimits ($IKcontrol+".ToePivotSide") ($Tip+".rotateY") (-10) 10 (-70)(70)(0);
   ConnectWithLimits ($IKcontrol+".ToeLift") ($BallLift+".rotateZ") (-10) 10 (-70)(70)(0);
   ConnectWithLimits ($IKcontrol+".BallPivot") ($Ball+".rotateZ") (-10) 10 (70)(-70)(0);
   ConnectWithLimits ($IKcontrol+".HeelPivot") ($Tap+".rotateZ") (-10) 10 (-70)(70)(0);
   ConnectWithLimits ($IKcontrol+".Tilt") ($SideIn+".rotateX") (-10) 10 (-70)(0)(0);
   ConnectWithLimits ($IKcontrol+".Tilt") ($SideOut+".rotateX") (-10) 10 (0)(70)(0);


  // AttachTo
   
	//pointConstraint $IKcontrol $IKname;
	//orientConstraint $IKcontrol $Ex4;
	
	//connectAttr ($IKcontrol +".rotate") ($Ex4+".rotate");
	string $GrupoCntrl1 = `RMCreateGrouponObj $IKcontrol 1`;

   connectAttr  ($IKcontrol+".Twist") ($IKname+".twist");
   LockAndHideAttributes ({$IKcontrol}) "1111110001";
    
	string $ParentC[]=`parentConstraint -mo $Systemparent $GrupoCntrl1`;
	string $moveMain=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
	parentConstraint -mo $moveMain $GrupoCntrl1;
	
	
	//Conecta el Control de Aligned To a el ParentConstraint

   string $Alias[]=`parentConstraint -q -wal $ParentC[0]`;   
	connectAttr   ($IKcontrol+".AttachTo") ($ParentC[0]+"."+$Alias[0]);
   
   string $newName=`RMSetFromName $IKcontrol 2 "FeetParentReverse"`;
   $newName=`RMSetFromName $newName 3 "utl"`;
   $newName=`RMSetFromName $newName 4 "rig"`;
   $newName=`RMUniqueName  $newName`;
   
   shadingNode -name $newName -asUtility reverse;
   connectAttr   ($IKcontrol+".AttachTo") ($newName+".inputX");
   connectAttr   ($newName+".outputX") ($ParentC[0]+"."+$Alias[1]);

	//parent $GrupoCntrl1 $moveMain;
	parent $MainData ScaledData;

	string $IKGroup=`RMObjNameToVar "*IKGroup*"`;
	parent $GrupoCntrl1 $IKGroup;
	
	return ({$IKcontrol,$PoleVector[0],$PoleVector[1]});
}

global proc RMaddFinguerControls (string $Object)
{
	addAttr -at "float" -ln MidUD -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln UD1 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln UD2 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln UD3 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln MidLR -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln LR1 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln LR2 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln LR3 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln MidTwist -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Twist1 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Twist2 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Twist3 -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "enum" -k on -ln Secondary -en "Off:On:" $Object;
}

global proc RMaddPalmControls(string $Object)
{
	addAttr -at "float" -ln PalmBend -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln PalmCup -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Spread -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Twist -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
}

global proc RMaddFeetControls(string $Object)
{
	addAttr -at "float" -ln Twist -hnv 1 -hxv 1 -h 0 -k 1 -smn -180 -smx 180 $Object;
	//addAttr -at "float" -ln UpperLegScale  -h 0 -k 1 $Object;
	//addAttr -at "float" -ln LowerLegScale  -h 0 -k 1 $Object;
	addAttr -at "float" -ln ToePivot -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln ToePivotSide -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln ToeLift -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln BallPivot -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln HeelPivot -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "float" -ln Tilt -hnv 1 -hxv 1 -h 0 -k 1 -smn -10 -smx 10 $Object;
	addAttr -at "enum" -k on -ln AttachTo -en "WORLD:COG:" $Object;
}

global proc RMAddVisibilityControls(string $Object)
{
    addAttr -at "enum" -k on -ln BodyControls -en "Off:On:" $Object;   
    addAttr -at "enum" -k on -ln ToonyControls -en "Off:On:" $Object;       
    addAttr -at "enum" -k on -ln FaceControls -en "Off:On:" $Object;
    addAttr -at "enum" -k on -ln Resolution -en "Off:On:" $Object;   
    addAttr -at "enum" -k on -ln MeshAs -en "Reference:Normal:" $Object;
    addAttr -at "enum" -k on -ln AttachTo -en "HighRes:FacialRes:LowRes:" $Object;
    
}
 /*Crea la herarquia de los controles IK*/
global proc string[] RMCreateIKControls (string $IKroot , string $Systemparent)
{
	//Obtiene los nombres de los 4 joints del sistema y los reasigna a Ex1 2 3 4
	string $Ex1 = $IKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	//Crea un control posicionado y RMAligndo a la extremidad 4
    float $Lenghtbone = `RMLenghtOfBone $Ex3`/5;
    string $IKcontrol=`RMSetFromName $Ex4 3 "ctr"`;
    $IKcontrol=`RMUniqueName $IKcontrol`;
    $IKcontrol = `RMCreateCubeLine $Lenghtbone $Lenghtbone $Lenghtbone $IKcontrol`;
    move -r ($Lenghtbone/2) 0 0 ($IKcontrol+".scalePivot") ($IKcontrol+".rotatePivot");
	move -rpr -a 0 0 0 $IKcontrol;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $IKcontrol;
///////////////////////////////7
    RMAlign $Ex4 $IKcontrol 1;
/*    setAttr $IKcontrol*/

	//Crea un Nombre para el IK que tenga en el sistema al que pertenece IKH
	$IKname=$Ex4;
	$IKname=`RMSetFromName $IKname 3 "IKH"`;
	$IKname=`RMSetFromName $IKname 4 "IK"`;
	ikHandle -sj $Ex1 -ee $Ex4 -name $IKname;

	string $PoleVector[]=`RMCreatePoleVector $IKname`;
	
	RMMakeIkStretchy $IKname;
	pointConstraint $IKcontrol $IKname;
	string $OrientGroup=`RMCreateGrouponObj $Ex4 3`;
	parent $OrientGroup $IKcontrol;
	orientConstraint $OrientGroup $Ex4;
	//connectAttr ($IKcontrol +".rotate") ($Ex4+".rotate");
	string $GrupoCntrl1 = `RMCreateGrouponObj $IKcontrol 1`;

	/////////////////////////////7
	
	///////////////////////////////7
	addAttr -at "float" -ln Twist -hnv 1 -hxv 1 -h 0 -k 1 -smn -180 -smx 180 $IKcontrol;
    connectAttr  ($IKcontrol+".Twist") ($IKname+".twist");


	string $ParentC[]=`parentConstraint -mo $Systemparent $GrupoCntrl1`;
	string $moveMain=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
	parentConstraint -mo $moveMain $GrupoCntrl1;
    ////////////////////////////7777
    addAttr -at "enum" -k on -ln AttachTo -en "WORLD:COG:" $IKcontrol;

    string $Alias[]=`parentConstraint -q -wal $ParentC[0]`;   
    connectAttr   ($IKcontrol+".AttachTo") ($ParentC[0]+"."+$Alias[0]);
   
    string $newName=`RMSetFromName $IKcontrol 2 "HandIKReverse"`;
    $newName=`RMSetFromName $newName 3 "utl"`;
    $newName=`RMSetFromName $newName 4 "rig"`;
    $newName=`RMUniqueName  $newName`;
   
    shadingNode -name $newName -asUtility reverse;
    connectAttr   ($IKcontrol+".AttachTo") ($newName+".inputX");
    connectAttr   ($newName+".outputX") ($ParentC[0]+"."+$Alias[1]);

    RMLockAndHideAttributes ({$IKcontrol}) "1111110001";

    string $ScaledData = RMObjNameToVar ("ScaledData");
    parent $IKname $ScaledData;
    string $Group = `RMObjNameToVar "*IKGroup*"`;
	parent $GrupoCntrl1 $Group;

	parentConstraint -mo $Systemparent $GrupoCntrl1;
	return ({$IKcontrol,$PoleVector[0],$PoleVector[1]});
}

global proc string[] RMCreateFKControlsArm (string $FKroot,string $Systemparent)
	{    
	float $Tam=`RMLenghtOfBone $FKroot`;
	string $Ex1 = $FKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
/*	string $CntrlExt1 = `RMCreateBoxCtrl $Ex1`;
	string $CntrlExt2 = `RMCreateBoxCtrl $Ex3`;
	string $CntrlExt3 = `RMCreateBoxCtrl $Ex4`;*/
	
	string $CntrlExt1 = `RMCreaControl $Ex1 ($Tam*1/2)`;
	string $CntrlExt2 = `RMCreaControl $Ex3 ($Tam*1/2)`;
	string $CntrlExt3 = `RMCreaControl $Ex4 ($Tam*1/3)`;
	
	string $GrupoCntrl1 = `RMCreateGrouponObj $CntrlExt1 1`;
	string $GrupoCntrl2 = `RMCreateGrouponObj $CntrlExt2 1`;
	string $GrupoCntrl3 = `RMCreateGrouponObj $CntrlExt3 1`;
	
	RMAlign $Ex4 $GrupoCntrl3 2;
	xform   -roo "zyx" -p true  $CntrlExt3;
	setAttr ($GrupoCntrl3+".rotateZ") 0; 

	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt3;
	
	pointConstraint $Ex1 $GrupoCntrl1;
	parentConstraint -mo $Systemparent $GrupoCntrl1;
	pointConstraint $Ex3 $CntrlExt2;
	parentConstraint -maintainOffset -st "none" $Ex2 $GrupoCntrl2;
	parent $GrupoCntrl2 $GrupoCntrl1;

	parent $GrupoCntrl3 $GrupoCntrl2;
	parentConstraint -mo $CntrlExt2 $GrupoCntrl3;
	//parentConstraint $CntrlExt3 $Ex4;
	connectAttr ($CntrlExt1 +".rotate") ($Ex1+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex2+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex3+".rotate");
//	OrientConstraint -mo $CntrlExt3 $Ex4;
	connectAttr ($CntrlExt3+".rotate") ($Ex4+".rotate");
//funciones para el stretchyIK 
	
	RMConnectScale $CntrlExt1 $Ex2;
	RMConnectScale $CntrlExt2 $Ex3;
	RMConnectScale $CntrlExt2 $Ex4;

	RMLockAndHideAttributes ({$CntrlExt1}) "0001111003";
	RMLockAndHideAttributes ({$CntrlExt2}) "0000101003";
    RMLockAndHideAttributes ({$CntrlExt3}) "0001110003";
   
   string $Mover2=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
   string $FKGroup=`RMObjNameToVar "*FKGroup*"`;
   parent $GrupoCntrl1 $FKGroup;
   
	return {$CntrlExt1, $CntrlExt2, $CntrlExt3};

}

/**********************************************************************/
/**********************************************************************/
/***********************************LEGS*******************************/
/**********************************************************************/
/*Crea la herarquia de los controles IK Para La Pierna*/
global proc string[] RMCreateFKControlsLeg (string $FKroot,string $Systemparent)
	{    
	float $Tam=`RMLenghtOfBone $FKroot`;
	string $Ex1 = $FKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
    string $temp3[]=`listRelatives -c $temp2[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
    string $Ex5=$temp3[0];
/*	string $CntrlExt1 = `RMCreateBoxCtrl $Ex1`;
	string $CntrlExt2 = `RMCreateBoxCtrl $Ex3`;
	string $CntrlExt3 = `RMCreateBoxCtrl $Ex4`;*/
	string $CntrlExt1 = `RMCreaControl $Ex1 ($Tam*1/2)`;
	string $CntrlExt2 = `RMCreaControl $Ex3 ($Tam*1/2)`;
	string $CntrlExt3 = `RMCreaControl $Ex4 ($Tam*1/4)`;
	string $CntrlExt4 = `RMCreaControl $Ex5 ($Tam*1/4)`;
	
	string $GrupoCntrl1 = `RMCreateGrouponObj $CntrlExt1 1`;
	string $GrupoCntrl2 = `RMCreateGrouponObj $CntrlExt2 1`;
	string $GrupoCntrl3 = `RMCreateGrouponObj $CntrlExt3 1`;
	string $GrupoCntrl4 = `RMCreateGrouponObj $CntrlExt4 1`;
    setAttr ($GrupoCntrl3+".rotateY") 0;
    	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex4;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $CntrlExt4;
	
	pointConstraint $Ex1 $GrupoCntrl1;
	parentConstraint -mo $Systemparent $GrupoCntrl1;
	pointConstraint $Ex3 $CntrlExt2;
	parentConstraint -maintainOffset -st "none" $Ex2 $GrupoCntrl2;
	parent $GrupoCntrl2 $GrupoCntrl1;
	parent $GrupoCntrl4 $GrupoCntrl3;

	parent $GrupoCntrl3 $GrupoCntrl2;
	parentConstraint -mo $CntrlExt2 $GrupoCntrl3;
	//pointConstraint $Ex4 $GrupoCntrl3;
	//OrientConstraint $GrupoCntrl2 $GrupoCntrl3;
	//parentConstraint -mo $CntrlExt2 $GrupoCntrl3;
	//parentConstraint $CntrlExt3 $Ex4;
	connectAttr ($CntrlExt1 +".rotate") ($Ex1+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex2+".rotate");
	connectAttr ($CntrlExt2 +".rotate") ($Ex3+".rotate");
	connectAttr ($CntrlExt3 +".rotate") ($Ex4+".rotate");
	//connectAttr ($CntrlExt4 +".rotate") ($Ex5+".rotate");
    
	orientConstraint -mo $CntrlExt3 $Ex4;
	orientConstraint $CntrlExt4 $Ex5;
	parentConstraint -mo $Ex4 $GrupoCntrl4;
	/*funciones para el stretchyIK */

	RMConnectScale $CntrlExt1 $Ex2;
	RMConnectScale $CntrlExt2 $Ex3;
	RMConnectScale $CntrlExt2 $Ex4;

	RMLockAndHideAttributes ({$CntrlExt1}) "0001111003";
	RMLockAndHideAttributes ({$CntrlExt2}) "0000101003";
    RMLockAndHideAttributes ({$CntrlExt3}) "0001110003";
   
    string $Mover2=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
    string $FKGroup=`RMObjNameToVar "*FKGroup*"`;
	parent $GrupoCntrl1 $FKGroup;
    //parent $GrupoCntrl1 $Mover2;
   
   return {$CntrlExt1, $CntrlExt2, $CntrlExt3,$CntrlExt4};
}

global proc string[] RMCreateIKControlsLeg (string $IKroot , string $Systemparent)
{
	//Obtiene los nombres de los 4 joints del sistema y los reasigna a Ex1 2 3 4
	string $Ex1 = $IKroot;
	string $temp[]=`listRelatives -c $Ex1`;
	string $temp1[]=`listRelatives -c $temp[0]`;
	string $temp2[]=`listRelatives -c $temp1[0]`;
	string $temp3[]=`listRelatives -c $temp2[0]`;
	string $temp4[]=`listRelatives -c $temp3[0]`;
	string $Ex2=$temp[0];
	string $Ex3=$temp1[0];
	string $Ex4=$temp2[0];
	string $Ex5=$temp3[0];
	string $Ex6=$temp4[0];
	RMAlign $Ex5 $Ex6 2; 
	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex1;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex2;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex3;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex4;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $Ex5;
	//Crea un control posicionado y RMAligndo a la extremidad 4
	float $FeetSize=`RMDistancia $Ex4 $Ex5`;
   //string $IKcontrol = ` RMCreateBoxCtrl $Ex4`;
    string $IKcontrol=$Ex4;
	$IKcontrol=`RMSetFromName $IKcontrol 3 "ctr"`;
	$IKcontrol=`RMSetFromName $IKcontrol 4 "IK"`;
	$IKcontrol=`RMUniqueName $IKcontrol`;

    RMCreateCubeLine $FeetSize $FeetSize $FeetSize $IKcontrol;
    move -r ($FeetSize/2) 0 0 ($IKcontrol+".scalePivot") ($IKcontrol+".rotatePivot");
	move -rpr -a 0 0 0 $IKcontrol;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $IKcontrol;
   
   
  // RMAlign  $Ex5 $IKcontrol 2;
   RMAlign  $Ex4 $IKcontrol 1;
	
//	string $IKcontrol = `RMCreaControl $Ex4 4`;
	//Crea un Nombre para el IK que tenga en el sistema al que pertenece IKH
	string $IKname=$Ex4;
	$IKname=`RMSetFromName $IKname 3 "IKH"`;
	$IKname=`RMSetFromName $IKname 4 "IK"`;
	string $BallIK=`RMSetFromName $IKname 2 "BallIK"`;
    string $TipIK=`RMSetFromName $IKname 2 "TipIK"`;
	
	ikHandle -sj $Ex1 -ee $Ex4 -name $IKname;

   ikHandle -sj $Ex4 -ee $Ex5 -name $BallIK;
   ikHandle -sj $Ex5 -ee $Ex6 -name $TipIK;
   
	string $PoleVector[]=`RMCreatePoleVector $IKname`;
	RMMakeIkStretchy $IKname;
	
	
	string $Ankle=$Ex4;
	$Ankle=`RMSetFromName $Ankle 2 "Ankle"`;
	$Ankle=`RMSetFromName $Ankle 3 "grp"`;
	$Ankle=`RMSetFromName $Ankle 4 "IK"`;
	string $Ball=`RMSetFromName $Ankle 2 "Ball"`;
   string $BallLift=`RMSetFromName $Ankle 2 "BallLift"`;
   string $Toe=`RMSetFromName $Ankle 2 "Toe"`;
   string $Tap=`RMSetFromName $Ankle 2 "Tap"`;
   string $Tip=`RMSetFromName $Ankle 2 "Tip"`;
   
   string $SideIn=`RMSetFromName $Ankle 2 "SideIn"`;
   string $SideOut=`RMSetFromName $Ankle 2 "SideOut"`;
   string $FeetOrient=`RMSetFromName $Ankle 2 "FeetOrient"`;

         
   group -em -name $Ball;
   group -em -name $BallLift;
//   group -em $Toe;   
   group -em -name $Tap;   
   group -em -name $Tip; 
   group -em -name $SideIn;	
   group -em -name $SideOut;


   RMAlign $Ex5 $Ball 3;
   RMAlign $Ex5 $BallLift 3;
//   RMAlign $Ex5 $Toe 3;
   RMAlign $Ex5 $Tip 3;
   RMAlign $Ex6 $Tip 1;
   RMAlign $Ex5 $Tap 3;
   RMAlign $Ex5 $SideIn 3;
   RMAlign $Ex5 $SideOut 3;
   
   //move -ws -r -moveY 0 $FeetSize 0 $Ex6;

   if (`RMGetFromName $SideIn 1`=="LF")
       {
        move -ws -r -moveX ($FeetSize*.3) 0  0 $SideIn;
        move -ws -r -moveX (-$FeetSize*.3) 0 0 $SideOut;
       }
   else {
        move -ws -r -moveX (-$FeetSize*.3) 0 0 $SideIn;
        move -ws -r -moveX ($FeetSize*.3) 0 0 $SideOut;
       }
  
   move -ws -r -moveZ 0 0 (-$FeetSize*0.5) $Tap;
   
   
   
   parent $IKname $Ball;
   parent $BallIK $BallLift;
   parent $TipIK $BallLift;
   parent $BallLift $SideIn;   
   parent $Ball $SideIn;      
   parent $SideIn $SideOut;   
   parent $SideOut $Tap;
   parent $Tap $Tip;
   string $TipData=`RMCreateGrouponObj $Tip 1`;
   string $MainData=`RMCreateGrouponObj $TipData 1`;
   string $Name=`RMSetFromName $TipData 2 "MainFeetData"`;
   $MainData=`rename $MainData $Name`;
   
   parentConstraint  -mo $IKcontrol $TipData;
    
   RMaddFeetControls $IKcontrol;

   RMConnectWithLimits ($IKcontrol+".ToePivot") ($Tip+".rotateZ") (-10) 10 (-70)(70)(0);
   RMConnectWithLimits ($IKcontrol+".ToePivotSide") ($Tip+".rotateY") (-10) 10 (-70)(70)(0);
   RMConnectWithLimits ($IKcontrol+".ToeLift") ($BallLift+".rotateZ") (-10) 10 (-70)(70)(0);
   RMConnectWithLimits ($IKcontrol+".BallPivot") ($Ball+".rotateZ") (-10) 10 (70)(-70)(0);
   RMConnectWithLimits ($IKcontrol+".HeelPivot") ($Tap+".rotateZ") (-10) 10 (-70)(70)(0);
   RMConnectWithLimits ($IKcontrol+".Tilt") ($SideIn+".rotateX") (-10) 10 (-70)(0)(0);
   RMConnectWithLimits ($IKcontrol+".Tilt") ($SideOut+".rotateX") (-10) 10 (0)(70)(0);


  // AttachTo
   
	//pointConstraint $IKcontrol $IKname;
	//orientConstraint $IKcontrol $Ex4;
	
	//connectAttr ($IKcontrol +".rotate") ($Ex4+".rotate");
	string $GrupoCntrl1 = `RMCreateGrouponObj $IKcontrol 1`;

   connectAttr  ($IKcontrol+".Twist") ($IKname+".twist");
   RMLockAndHideAttributes ({$IKcontrol}) "1111110001";
    
	string $ParentC[]=`parentConstraint -mo $Systemparent $GrupoCntrl1`;
	string $moveMain=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
	parentConstraint -mo $moveMain $GrupoCntrl1;
	
	
	//Conecta el Control de Aligned To a el ParentConstraint

   string $Alias[]=`parentConstraint -q -wal $ParentC[0]`;   
	connectAttr   ($IKcontrol+".AttachTo") ($ParentC[0]+"."+$Alias[0]);
   
    string $newName=`RMSetFromName $IKcontrol 2 "FeetParentReverse"`;
    $newName=`RMSetFromName $newName 3 "utl"`;
    $newName=`RMSetFromName $newName 4 "rig"`;
    $newName=`RMUniqueName  $newName`;
   
    shadingNode -name $newName -asUtility reverse;
    connectAttr   ($IKcontrol+".AttachTo") ($newName+".inputX");
    connectAttr   ($newName+".outputX") ($ParentC[0]+"."+$Alias[1]);
   
	//parent $GrupoCntrl1 $moveMain;
	string $IKGroupp=`RMObjNameToVar "*IKGroup*"`;
	parent $GrupoCntrl1 $IKGroupp;
	parent $MainData ScaledData;

	/*string $ScaledData = RMObjNameToVar ("ScaledData");
    parent $IKname $ScaledData;
    string $Group = `RMObjNameToVar "*IKGroup*"`;
	parent $GrupoCntrl1 $Group;*/

	return ({$IKcontrol,$PoleVector[0],$PoleVector[1]});
}

global proc string [] RMRebuildFKLegs(){
	string $LeftArmroot= `RMObjNameToVar "*LF_leg_jnt*"`;
	RMRebuildLeg $LeftArmroot "FK";
	string $LeftArmrootParent[]=`listRelatives -p $LeftArmroot`;
	string $LeftArmrootFK=`RMObjNameToVar "*LF_leg_jnt_FK"`;
	string $LeftCntrls[]=`RMCreateFKControlsLeg $LeftArmrootFK $LeftArmrootParent[0]`;
	
	string $RightArmroot = `RMObjNameToVar "*RH_leg_jnt*"`;
	RMRebuildLeg $RightArmroot "FK";
	string $RightArmrootParent[]=`listRelatives -p $RightArmroot`;
	string $RightArmrootFK=`RMObjNameToVar "*RH_leg_jnt_FK"`;
	string $RightCntrls[]=`RMCreateFKControlsLeg $RightArmrootFK $RightArmrootParent[0]`;
	
	appendStringArray $LeftCntrls $RightCntrls 4;
	
	return $LeftCntrls;
}
global proc string[] RMRebuildIKLegs()
{
	string $LeftArmroot=`RMObjNameToVar "*LF_leg_jnt*"`;
	string $LeftArmrootIK=`RMRebuildLeg $LeftArmroot "IK"`;
	string $LeftArmrootParent[]=`listRelatives -p $LeftArmroot`;
	string $LeftCntrls[]=`RMCreateIKControlsLeg $LeftArmrootIK $LeftArmrootParent[0]`;
	
	string $RightArmroot=`RMObjNameToVar "*RH_leg_jnt*"`;
	string $RightArmrootIK=`RMRebuildLeg $RightArmroot "IK"`;
	string $RightArmrootParent[]=`listRelatives -p $RightArmroot`;
	string $RightCntrls[]=`RMCreateIKControlsLeg $RightArmrootIK $RightArmrootParent[0]`;
	return ({$LeftCntrls[0],$LeftCntrls[1],$LeftCntrls[2],$RightCntrls[0],$RightCntrls[1],$RightCntrls[2]});

}

global proc RMRebuildJXTLeg(string $side,string $IKControls[],string $FKControls[])
{
	string $ORGArmroot=`RMObjNameToVar ("*"+$side+"_leg_jnt_rig")`;
	
	RMRebuildLeg $ORGArmroot "JXT";
	
	//Identifica el Nodo de la pierna que acaba de reconstruir Rebuild Leg
	$JXTArmroot=`RMObjNameToVar ("*"+$side+"_leg_jnt_JXT")`;
	
	//Busca El nodo del Hip
	string $JXTArmrootParent[]=`listRelatives -p $ORGArmroot`;
	string $JXTArmControl = $JXTArmroot;
	$JXTArmControl=`RMSetFromName $JXTArmControl 3 "ctr"`;
	$JXTArmControl=`RMSetFromName $JXTArmControl 4 "rig"`;
	
	duplicate -name $JXTArmControl "clav_ctrl";
	
	/////////////////////
	//Calcula La RMDistancia entre la clavicula y el Brazo para redimensionar la Clavicula	
	float $ClavSize = `RMDistancia $ORGArmroot $JXTArmrootParent[0]`;
	//float $ClavSize = RMLenghtOfBone ($JXTArmrootParent[0]);
	scale -scaleXYZ ($ClavSize+1) ($ClavSize+1) ($ClavSize+1) $JXTArmControl;
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $JXTArmControl;
	//RMAlign EL control De la clavicula a su nacimiento
	RMAlign $JXTArmroot $JXTArmControl 3;
	
	//Crea Un Grupo Padre al Control
	string $JXTArmControlGrp = `RMCreateGrouponObj $JXTArmControl 1`;
	string $JXTArmControlGrp2 = `RMCreateGrouponObj $JXTArmControlGrp 1`;


//	CreaUn Nodo RMAligndo al mundo en la posicion del Pecho para usarlo en el Orient Constraint Y evitar que popee
/*	string $JointOriented=`RMCreateGrouponObj $Pecho[0] 0`;
	string $WorldOriented=`RMUniqueName $JointOriented`;
	group -em -name $WorldOriented;
	RMAlign $JointOriented $WorldOriented 1;
	parent $WorldOriented $Pecho[0];*/
	
   //	Emparenta con un parent Constraint Al Pecho La clavicula 
   parent -world  $JXTArmControl;
   
   parentConstraint -mo $JXTArmrootParent[0] $JXTArmControlGrp;

//Emparenta el Control del Brazo al Gru
   parent $JXTArmControl $JXTArmControlGrp;

	string $temp[];
	string $IKArmroot=`RMObjNameToVar ("*"+$side+"_leg_jnt_IK")`;
	string $FKArmroot=`RMObjNameToVar ("*"+$side+"_leg_jnt_FK")`;
	for ($n=0;$n<=5;$n++)
	{
		RMParentLink $IKArmroot $FKArmroot $JXTArmroot $JXTArmControl;
		$temp=`listRelatives -c -typ "transform" $IKArmroot`;
		$IKArmroot=$temp[0];
		$temp=`listRelatives -c -typ "transform" $FKArmroot`;
		$FKArmroot=$temp[0];
		$temp=`listRelatives -c -typ "transform" $JXTArmroot`;
		$JXTArmroot=$temp[0];
	}
	
	//select -r $ORGArmroot;
	//pickWalk -d "down";
	//pickWalk -d "down";

	//string $temp[]=`ls -sl`;
	//string $Handnodes[]=`RMRemoveChildren $temp[0]`;
	//RMParentArray $JXTArmroot $Handnodes;
    
	RMIKFKvisibilityLink ($IKControls,"IK",$JXTArmControl);
	RMIKFKvisibilityLink ($FKControls, "FK" ,$JXTArmControl);
	
    string $Mover2=`RMObjNameToVar "*MD_Mover2_ctr_rig"`;
    RMLockAndHideAttributes ({$JXTArmControl}) "0000000000";
    parent $JXTArmControlGrp2 $Mover2;
    
    
   
   ///////////////////////////////////////////////////////////////////7
	//funciones para crear Toony Controls
	
	$JXTArmroot=`RMObjNameToVar ("*"+$side+"_leg_jnt_JXT")`;
    string $temp1[]=`listRelatives -c $JXTArmroot`;    
    string $temp2[]=`listRelatives -c $temp1[0]`;
    string $temp3[]=`listRelatives -c $temp2[0]`;
	string $JXTArmroot1 = $temp1[0];
	string $JXTArmroot2 = $temp2[0];
	string $JXTArmroot3 = $temp3[0];	

	string $Ribbon01[]=`RMCreaRibbon  $JXTArmroot $JXTArmroot1`;
    string $Ribbon02[]=`RMCreaRibbon  $JXTArmroot2 $JXTArmroot3`;
    
    string $Ribbon1Controls[]=`listRelatives -c $Ribbon01[2]`;
    string $Ribbon2Controls[]=`listRelatives -c $Ribbon02[2]`;
    
    float  $LongitudBrazo = `RMLenghtOfBone $JXTArmroot2`;
    string $MidControl =`RMCreaControl $JXTArmroot2 ($LongitudBrazo/3)`;
    string $MidControlParent=`RMCreateGrouponObj $MidControl 1`;
    
    parentConstraint -mo $JXTArmroot1 $MidControlParent;
    
    parentConstraint -mo $MidControl $Ribbon1Controls[2];
    parentConstraint -mo $MidControl $Ribbon2Controls[0];
    parentConstraint $JXTArmroot3 $Ribbon2Controls[2];
    parentConstraint -mo $JXTArmrootParent[0] $Ribbon1Controls[0];
    
    string $Ribbon1Md=`RMCreateGrouponObj $Ribbon1Controls[1] 1`;
    string $Ribbon2Md=`RMCreateGrouponObj $Ribbon2Controls[1] 1`;
    
    parentConstraint -mo $JXTArmroot $Ribbon1Md;
    parentConstraint -mo $JXTArmroot2 $Ribbon2Md;
   
    RMdeleteShapeNodes $Ribbon1Controls[0];
    RMdeleteShapeNodes $Ribbon1Controls[2];
    RMdeleteShapeNodes $Ribbon2Controls[0];    
    RMdeleteShapeNodes $Ribbon2Controls[2];

   
    string $MainVis=`RMObjNameToVar ("*MainVisibility*")`;
    connectAttr ($MainVis+".ToonyControls") ($Ribbon1Controls[1]+".visibility");
    connectAttr ($MainVis+".ToonyControls") ($Ribbon2Controls[1]+".visibility");
    connectAttr ($MainVis+".ToonyControls") ($MidControl+".visibility");   

    string $Group = `RMObjNameToVar ("*JXTGroup*")`;
	string $kneeThing = `RMObjNameToVar ("*"+$side+"_KneeBGroup_grp_JXT")`;
	parent $kneeThing $Group;
   
}

global proc RMCreateMainGroupsAndControls()
{
  	string $hips=`RMObjNameToVar "*HipLow_jnt*"`;
  	//string $hips=`RMObjNameToVar "*HipLowNub_jnt"`;
    float $r=`RMLenghtOfBone $hips`;
    $r=$r*10;
    
    $newName=$hips;
    $newName=`RMSetFromName $newName 2 "Mover"`;
    $newName=`RMSetFromName $newName 3 "ctr"`;
    $newName=`RMSetFromName $newName 4 "rig"`;
    string $Mover1=`RMUniqueName $newName`;
    string $temp[]=`circle -normal 0 1 0 -r $r -name $Mover1`;
    string $Mover2=`RMUniqueName $newName`;
    string $temp[]=`circle -normal 0 1 0 -r ($r*7/8) -name $Mover2`;
    string $Mover3=`RMUniqueName $newName`;    
    string $temp[]=`circle -normal 0 1 0 -r ($r*6/8) -name $Mover3`;
    string $CharacterName=`RMGetFromName $hips 0`;
    
    $CharacterName=`group  -em -name $CharacterName`;
    
    group  -em -name "Skeleton";
    group  -em -name "Geometry";
    group  -em -name "Controls";
    group  -em -name "SkinedGeometry";
    group  -em -name "ScaledGeometry";
    group  -em -name "BlendShapes";
    group  -em -name "Joints";
    group  -em -name "ScaledData";
    group  -em -name "NoScaledData";
    
    parent Skeleton $CharacterName;
    parent Geometry $CharacterName;
    parent Controls $CharacterName;
   
    parent Joints Skeleton;
    parent ScaledData Skeleton;
    parent NoScaledData Skeleton;
    
    parent  SkinedGeometry Geometry;
    parent  ScaledGeometry Geometry;
    parent  BlendShapes Geometry;
    
    parent $Mover2 $Mover1;
    parent $Mover3 $Mover2;
    parent $Mover1 Controls;
    
    scaleConstraint $Mover1 ScaledGeometry;
    scaleConstraint $Mover1 ScaledData;
    scaleConstraint $Mover1 Joints;    
    
    string $VChar=$hips;
    $VChar=`RMSetFromName $VChar 2 "MainVisibility"`;
    $VChar=`RMSetFromName $VChar 3 "ctr"`;
    $VChar=`RMSetFromName $VChar 4 "rig"`;
    $VChar=`RMUniqueName $VChar`;
    duplicate -name $VChar V;
    RMAddVisibilityControls $VChar;
    scale -scaleXYZ ($r/6) ($r/6) ($r/6) $VChar;
    parent $VChar $Mover1;
    
    if (`objExists ("*head_jnt*")`==true)
    {
    	string $head=`RMObjNameToVar "*head_jnt*"`;
        RMAlign  $head $VChar 1;
    }
    move -ws -r -moveY 0 ($r/10) 0 $VChar;
    connectAttr ($VChar+".BodyControls")($Mover2+".visibility");
}